<$comment
EO Template for use by "eogenerator" based upon MiscMerge engine.
You may customize this file to modify the templates generated
by this tool.  See the MiscMerge documentation for a description
of the parsing language.  The engine gets passed this file and an
EOEntity to process, so the methods used must be ones that an
EOEntity can respond to.

BE SURE NOT TO INCLUDE DATES IN THIS FILE.  Since the "eogenerator"
tool tries to compare the newly generated file with the old file,
adding dates to this file will guarantee the old file gets
overridden by the new file, forcing a recompilation of your EO.$><$foreach package classPackage do$>package <$package$>;

<$endforeach do
$>
import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import java.util.*;
import java.math.BigDecimal;


/**
 * Created by eogenerator
 * DO NOT EDIT.  Make changes to <$classNameWithoutPackage$>.java instead.
 *
 * Copyright (c) <$copyrightYear$>, The Regents of the University of Michigan, Ann Arbor, MI 48109 USA   All rights reserved.
 * This software is published under the terms of the Educational Community License (ECL) version 1.0,
 * a copy of which has been included with this distribution in the LICENSE.TXT file.
 * 
 * @version $Revision$
 */  
public class _<$classNameWithoutPackage$> extends <$if hasParentEntity$><$parentClassName$><$else$><$EOSuperClass$><$endif$> 
{

<$foreach property classProperties.@reversedArray do$>
   <$if property.isDeclaredBySuperClass$><$else$>public static final String <$property.name.uppercaseString$> = "<$property.name$>";<$endif$><$endforeach do$>


<$foreach attribute classAttributes.@reversedArray do$>
    public <$attribute.javaValueClassName$> <$attribute.name$>() 
    {
        return (<$attribute.javaValueClassName$>)storedValueForKey("<$attribute.name$>");
    }



    public void set<$attribute.name.initialCapitalString$>(<$attribute.javaValueClassName$> aValue) 
    {
        takeStoredValueForKey(aValue, "<$attribute.name$>");
    }



<$endforeach do
$><$foreach ToOneRelationship classToOneRelationships.@reversedArray do$>
    public <$ToOneRelationship.destinationEntity.referenceJavaClassName$> <$ToOneRelationship.name$>() 
    {
        return (<$ToOneRelationship.destinationEntity.referenceJavaClassName$>)storedValueForKey("<$ToOneRelationship.name$>");
    }



    public void set<$ToOneRelationship.name.initialCapitalString$>(<$ToOneRelationship.destinationEntity.referenceJavaClassName$> aValue) 
    {
        takeStoredValueForKey(aValue, "<$ToOneRelationship.name$>");
    }



<$endforeach do
$><$foreach ToManyRelationship classToManyRelationships.@reversedArray do$>
    public NSArray <$ToManyRelationship.name$>() 
    {
        return (NSArray)storedValueForKey("<$ToManyRelationship.name$>");
    }



    public void set<$ToManyRelationship.name.initialCapitalString$>(NSMutableArray aValue) 
    {
        takeStoredValueForKey(aValue, "<$ToManyRelationship.name$>");
    }



    public void addTo<$ToManyRelationship.name.initialCapitalString$>(<$ToManyRelationship.destinationEntity.referenceJavaClassName$> object) 
    {
        NSMutableArray array = (NSMutableArray)<$ToManyRelationship.name$>();

        willChange();
        array.addObject(object);
    }



    public void removeFrom<$ToManyRelationship.name.initialCapitalString$>(<$ToManyRelationship.destinationEntity.referenceJavaClassName$> object) 
    {
        NSMutableArray array = (NSMutableArray)<$ToManyRelationship.name$>();

        willChange();
        array.removeObject(object);
    }



<$endforeach do$>}
