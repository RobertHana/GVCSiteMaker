/* Generated By:JJTree&JavaCC: Do not edit this line. JassParserTokenManager.java */
package jass.parser;

public class JassParserTokenManager implements JassParserConstants
{
  static boolean warned_assert = false;
static private final int jjMoveStringLiteralDfa0_6()
{
   return jjMoveNfa_6(0, 0);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 46;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(15, 17);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 97)
                     kind = 97;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 22:
                  if (curChar == 34 && kind > 98)
                     kind = 98;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar != 46)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(22, 24);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(22, 24);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(33, 8);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(37, 8);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 8);
                  break;
               case 42:
                  if (curChar != 48)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(12, 14);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(44, 2);
                  break;
               case 45:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(45, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(30, 32);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(33, 35);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 43:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(44, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 46 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x400000000000L) != 0L)
            return 6;
         if ((active0 & 0xa00L) != 0L || (active2 & 0x1002L) != 0L)
            return 60;
         if ((active0 & 0xffffff8000000000L) != 0L || (active1 & 0x7ffffffL) != 0L)
         {
            jjmatchedKind = 99;
            return 30;
         }
         return -1;
      case 1:
         if ((active0 & 0xdfe7ff8000000000L) != 0L || (active1 & 0x7ffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 1;
            }
            return 30;
         }
         if ((active0 & 0x800L) != 0L)
            return 51;
         if ((active0 & 0x2018000000000000L) != 0L)
            return 30;
         return -1;
      case 2:
         if ((active0 & 0xd7f7ff8000000000L) != 0L || (active1 & 0x7bfffd9L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 2;
            }
            return 30;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x400026L) != 0L)
            return 30;
         return -1;
      case 3:
         if ((active0 & 0xc7d7a78000000000L) != 0L || (active1 & 0x71dff95L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
            return 30;
         }
         if ((active0 & 0x1020580000000000L) != 0L || (active1 & 0xa20048L) != 0L)
            return 30;
         return -1;
      case 4:
         if ((active0 & 0xc056038000000000L) != 0L || (active1 & 0x511af95L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 4;
            }
            return 30;
         }
         if ((active0 & 0x781a40000000000L) != 0L || (active1 & 0x20c5000L) != 0L)
            return 30;
         return -1;
      case 5:
         if ((active0 & 0x4246028000000000L) != 0L || (active1 & 0x5110385L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
            return 30;
         }
         if ((active0 & 0x8010010000000000L) != 0L || (active1 & 0x8ac10L) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x4002008000000000L) != 0L || (active1 & 0x5110205L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 6;
            return 30;
         }
         if ((active0 & 0x244020000000000L) != 0L || (active1 & 0x180L) != 0L)
            return 30;
         return -1;
      case 7:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x110205L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 7;
            return 30;
         }
         if ((active0 & 0x2008000000000L) != 0L || (active1 & 0x5000000L) != 0L)
            return 30;
         return -1;
      case 8:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x10001L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 8;
            return 30;
         }
         if ((active1 & 0x100204L) != 0L)
            return 30;
         return -1;
      case 9:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 9;
            return 30;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 30;
         return -1;
      case 10:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 10;
            return 30;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000L);
      case 38:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L, 0x2000L);
      case 40:
         return jjStopAtPos(0, 102);
      case 41:
         return jjStopAtPos(0, 103);
      case 42:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800L);
      case 43:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L, 0x200L);
      case 44:
         return jjStopAtPos(0, 109);
      case 45:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x400L);
      case 46:
         return jjStartNfaWithStates_0(0, 110, 6);
      case 47:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_0(0xa00L, 0x0L, 0x1000L);
      case 58:
         return jjStopAtPos(0, 117);
      case 59:
         return jjStopAtPos(0, 108);
      case 60:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L, 0x20040L);
      case 61:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0xc0180L);
      case 63:
         return jjStopAtPos(0, 116);
      case 91:
         return jjStopAtPos(0, 106);
      case 93:
         return jjStopAtPos(0, 107);
      case 94:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xe0000000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f00000000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1c000000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x60000000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xf80000000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x7L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x780L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x401f000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e0000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 104);
      case 124:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x4000L);
      case 125:
         return jjStopAtPos(0, 105);
      case 126:
         return jjStopAtPos(0, 115);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         break;
      case 42:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 51);
         break;
      case 43:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      case 45:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         break;
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 60:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 61:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         break;
      case 62:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc0100L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80300000000000L, active1, 0x90L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x820L, active2, 0L);
      case 102:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 61, 30);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x20e1000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x420800000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7L, active2, 0L);
      case 111:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1813020000000000L, active1, 0x1800008L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0x700300L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4002000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4440L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x10000L, active2, 0L);
      case 124:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(2, 145);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(2, 146);
         break;
      case 62:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000L, active1, 0x102000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2828100L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x1000040L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x303000000000000L, active1, 0x10008L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400020000000000L, active1, 0x1200L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000000L, active1, 0x4000L, active2, 0L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40c0000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20118000000000L, active1, 0x1L, active2, 0L);
      case 116:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1040280000000000L, active1, 0x814L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x200000L, active2, 0L);
      case 119:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 30);
         break;
      case 121:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(3, 147);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x704040000000000L, active1, 0x1000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x10000L, active2, 0L);
      case 100:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 30);
         break;
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 30);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 30);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 30);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x40010000000000L, active1, 0x4004L, active2, 0L);
      case 103:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000010L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 108:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000020000000000L, active1, 0x2000400L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 111:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0xc0000L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 115:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x81800000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2008000000000L, active1, 0xa201L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x181L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4008000L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 30);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000020000000000L, active1, 0x200L);
      case 104:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x2400L);
      case 107:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 30);
         break;
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x210000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000018000000000L, active1, 0x804L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 30);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 30);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 119:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x28000000000L, active1, 0L);
      case 99:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 30);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 30);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 30);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 104:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1100000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x204000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
      case 115:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 30);
         break;
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 30);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x1L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 30);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 30);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x100000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 30);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 30);
         break;
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 30);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 30);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 88, 30);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x201L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0x110000L);
      case 112:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 30);
         break;
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 30);
         break;
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 66, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1L);
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 84, 30);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(9, 64, 30);
         break;
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 62, 30);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, 0L);
}
static private final int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 80, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 112;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if (curChar == 42)
                     jjCheckNAddTwoStates(101, 107);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(93, 98);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(83, 90);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(74, 80);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(62, 71);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(52, 59);
                  break;
               case 60:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 109;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 92;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 61;
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  else if ((0x3400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(1);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 47)
                     jjAddStates(49, 55);
                  else if (curChar == 36)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(56, 58);
                  else if (curChar == 39)
                     jjAddStates(59, 60);
                  else if (curChar == 46)
                     jjCheckNAdd(6);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(61, 63);
                  }
                  break;
               case 0:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x3400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(64, 66);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (curChar == 39)
                     jjAddStates(59, 60);
                  break;
               case 12:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if (curChar == 39 && kind > 97)
                     kind = 97;
                  break;
               case 15:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 13);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 18:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if (curChar == 34)
                     jjCheckNAddStates(56, 58);
                  break;
               case 21:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 23:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 24:
                  if (curChar == 34 && kind > 98)
                     kind = 98;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 70);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 27:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if (curChar != 36)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(71, 73);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(71, 73);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(37, 10);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(41, 10);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 10);
                  break;
               case 46:
                  if (curChar != 48)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(61, 63);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(48, 4);
                  break;
               case 49:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(49, 4);
                  break;
               case 50:
                  if (curChar == 47)
                     jjAddStates(49, 55);
                  break;
               case 52:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(52, 59);
                  break;
               case 61:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(62, 71);
                  break;
               case 62:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(62, 71);
                  break;
               case 72:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 73:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(74, 80);
                  break;
               case 74:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(74, 80);
                  break;
               case 81:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 82:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(83, 90);
                  break;
               case 83:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(83, 90);
                  break;
               case 91:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 92:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(93, 98);
                  break;
               case 93:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(93, 98);
                  break;
               case 99:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 100:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(101, 107);
                  break;
               case 101:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddTwoStates(101, 107);
                  break;
               case 108:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 109:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 111:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(30);
                  break;
               case 4:
                  if ((0x100000001000L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 10:
                  if ((0x5000000050L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(79, 81);
                  break;
               case 15:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 22:
                  if (curChar == 92)
                     jjAddStates(82, 84);
                  break;
               case 23:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 47:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(48, 4);
                  break;
               case 53:
                  if (curChar == 101 && kind > 3)
                     kind = 3;
                  break;
               case 54:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 63:
                  if (curChar == 116 && kind > 4)
                     kind = 4;
                  break;
               case 64:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 75:
                  if (curChar == 101 && kind > 5)
                     kind = 5;
                  break;
               case 76:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 84:
                  if (curChar == 116 && kind > 6)
                     kind = 6;
                  break;
               case 85:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 94:
                  if (curChar == 107 && kind > 7)
                     kind = 7;
                  break;
               case 95:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 102:
                  if (curChar == 101 && kind > 8)
                     kind = 8;
                  break;
               case 103:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 110:
                  if (kind > 10)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 30:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(30);
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(56, 58);
                  break;
               case 110:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 112 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x2000000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      default :
         return 2;
   }
   return 2;
}
static private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_2(0x200000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      default :
         return 2;
   }
   return 2;
}
static private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
static private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 23)
                     kind = 23;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x1000000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      default :
         return 2;
   }
   return 2;
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000L) != 0L || (active1 & 0x400000000000L) != 0L)
            return 6;
         if ((active0 & 0xffffffcfd80ae000L) != 0L || (active1 & 0x7ffffffL) != 0L)
         {
            jjmatchedKind = 99;
            return 30;
         }
         return -1;
      case 1:
         if ((active0 & 0xdfe7ffc7d80ae000L) != 0L || (active1 & 0x7ffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 1;
            }
            return 30;
         }
         if ((active0 & 0x2018000800000000L) != 0L)
            return 30;
         return -1;
      case 2:
         if ((active0 & 0xd7f7ffc7c80aa000L) != 0L || (active1 & 0x7bfffd9L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 2;
            }
            return 30;
         }
         if ((active0 & 0x800000010004000L) != 0L || (active1 & 0x400026L) != 0L)
            return 30;
         return -1;
      case 3:
         if ((active0 & 0xc7d7a781c00ae000L) != 0L || (active1 & 0x71dff95L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
            return 30;
         }
         if ((active0 & 0x1020584608000000L) != 0L || (active1 & 0xa20048L) != 0L)
            return 30;
         return -1;
      case 4:
         if ((active0 & 0xc0560380c000e000L) != 0L || (active1 & 0x511af95L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 4;
            }
            return 30;
         }
         if ((active0 & 0x781a401000a0000L) != 0L || (active1 & 0x20c5000L) != 0L)
            return 30;
         return -1;
      case 5:
         if ((active0 & 0x4246028080002000L) != 0L || (active1 & 0x5110385L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
            return 30;
         }
         if ((active0 & 0x801001004000c000L) != 0L || (active1 & 0x8ac10L) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x4002008000002000L) != 0L || (active1 & 0x5110205L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 6;
            return 30;
         }
         if ((active0 & 0x244020080000000L) != 0L || (active1 & 0x180L) != 0L)
            return 30;
         return -1;
      case 7:
         if ((active0 & 0x4000000000002000L) != 0L || (active1 & 0x110205L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 7;
            return 30;
         }
         if ((active0 & 0x2008000000000L) != 0L || (active1 & 0x5000000L) != 0L)
            return 30;
         return -1;
      case 8:
         if ((active0 & 0x4000000000002000L) != 0L || (active1 & 0x10001L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 8;
            return 30;
         }
         if ((active1 & 0x100204L) != 0L)
            return 30;
         return -1;
      case 9:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 9;
            return 30;
         }
         if ((active0 & 0x4000000000002000L) != 0L || (active1 & 0x1L) != 0L)
            return 30;
         return -1;
      case 10:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 10;
            return 30;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
static private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200000000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 18);
      case 37:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x10000L);
      case 38:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x800000000000000L, 0x2000L);
      case 40:
         return jjStopAtPos(0, 102);
      case 41:
         return jjStopAtPos(0, 103);
      case 42:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_1(0x1000L, 0x0L, 0x800L);
      case 43:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000000000000000L, 0x200L);
      case 44:
         return jjStopAtPos(0, 109);
      case 45:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_1(0x2000000000L, 0x2000000000000000L, 0x400L);
      case 46:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_1(0x10000L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_1(0x100000L, 0x0L, 0x1000L);
      case 58:
         return jjStopAtPos(0, 117);
      case 59:
         return jjStopAtPos(0, 108);
      case 60:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_1(0x20000000L, 0x80000000000000L, 0x20040L);
      case 61:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100000000000000L, 0xc0180L);
      case 63:
         return jjStopAtPos(0, 116);
      case 65:
         return jjMoveStringLiteralDfa1_1(0x10000000L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_1(0x8000000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_1(0x4c0000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_1(0x800000000L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_1(0x200000000L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_1(0x4000000000L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_1(0x100000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 106);
      case 93:
         return jjStopAtPos(0, 107);
      case 94:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x18000000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0xe0000000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x3f00000002000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x1c000000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x60000000008000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0xf80000000004000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x1000000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0xe000000000000000L, 0x7L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x70L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x780L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x20000L, 0x800L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x401f000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x80000L, 0x7e0000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1800000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 104);
      case 124:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_1(0x1000000000L, 0x400000000000000L, 0x4000L);
      case 125:
         return jjStopAtPos(0, 105);
      case 126:
         return jjStopAtPos(0, 115);
      default :
         return jjMoveNfa_1(2, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 38:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         break;
      case 42:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000L, active1, 0L, active2, 0L);
      case 43:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      case 45:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         break;
      case 46:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 60:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000L, active1, 0L, active2, 0x20000L);
      case 61:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         break;
      case 62:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0xc0100L);
      case 65:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 70:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(1, 35, 30);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_1(active0, 0xc0000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x80300000000000L, active1, 0x90L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000020000L, active1, 0x820L, active2, 0L);
      case 102:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 61, 30);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000002000L, active1, 0x20e1000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x300000000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x420800000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0xc000000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x7L, active2, 0L);
      case 111:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x1813020000004000L, active1, 0x1800008L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000080000L, active1, 0x700300L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4002000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4440L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x8000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000008000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000L, active1, 0x10000L, active2, 0L);
      case 124:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         break;
      case 61:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(2, 145);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(2, 146);
         break;
      case 62:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000L, active1, 0L, active2, 0x80000L);
      case 67:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_1(active0, 0x180000000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(2, 28, 30);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0xc00000082000L, active1, 0x102000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x400L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000L, active1, 0x2828100L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000000L, active1, 0x1000040L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x303000000000000L, active1, 0x10008L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x400020000000000L, active1, 0x1200L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0xc000000000000000L, active1, 0x4000L, active2, 0L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x4000L, active1, 0x40c0000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x20118000000000L, active1, 0x1L, active2, 0L);
      case 116:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x1040280000020000L, active1, 0x814L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000000000L, active1, 0x200000L, active2, 0L);
      case 119:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(2, 69, 30);
         break;
      case 121:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(2, 86, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(3, 147);
         break;
      case 67:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(3, 34, 30);
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 76:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(3, 27, 30);
         break;
      case 77:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 38, 30);
         break;
      case 80:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(3, 33, 30);
         break;
      case 82:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x704040000004000L, active1, 0x1000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000080000L, active1, 0x10000L, active2, 0L);
      case 100:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(3, 87, 30);
         break;
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 43, 30);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 44, 30);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 53, 30);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(3, 85, 30);
         return jjMoveStringLiteralDfa4_1(active0, 0x40010000000000L, active1, 0x4004L, active2, 0L);
      case 103:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(3, 67, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x4000010L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x80L, active2, 0L);
      case 108:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(3, 70, 30);
         return jjMoveStringLiteralDfa4_1(active0, 0x4000020000000000L, active1, 0x2000400L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000L, active1, 0x100000L, active2, 0L);
      case 111:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 60, 30);
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000000L, active1, 0xc0000L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 46, 30);
         return jjMoveStringLiteralDfa4_1(active0, 0x20000L, active1, 0x1000L, active2, 0L);
      case 115:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(3, 81, 30);
         return jjMoveStringLiteralDfa4_1(active0, 0x81800000008000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x2008000000000L, active1, 0xa201L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x800L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x100L, active2, 0L);
      case 124:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(4, 32, 30);
         break;
      case 80:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_1(active0, 0x80000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x181L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x4008000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(4, 19, 30);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 55, 30);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(4, 89, 30);
         return jjMoveStringLiteralDfa5_1(active0, 0x4000020000000000L, active1, 0x200L);
      case 103:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000L, active1, 0L);
      case 104:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 45, 30);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000000000L, active1, 0x2400L);
      case 107:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 42, 30);
         break;
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x210000000004000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(4, 78, 30);
         return jjMoveStringLiteralDfa5_1(active0, 0x8000018000000000L, active1, 0x804L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 47, 30);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x100000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 48, 30);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 58, 30);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(4, 76, 30);
         return jjMoveStringLiteralDfa5_1(active0, 0x8000L, active1, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x10L);
      case 119:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x80000L);
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(4, 17, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 84:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(5, 30, 30);
         return jjMoveStringLiteralDfa6_1(active0, 0x80000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x28000000000L, active1, 0L);
      case 99:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(5, 74, 30);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(5, 77, 30);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 52, 30);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(5, 68, 30);
         return jjMoveStringLiteralDfa6_1(active0, 0x2000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x80L);
      case 104:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(5, 79, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x1100000L);
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(5, 14, 30);
         return jjMoveStringLiteralDfa6_1(active0, 0x204000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(5, 75, 30);
         return jjMoveStringLiteralDfa6_1(active0, 0x2000000000000L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x10000L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(5, 15, 30);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(5, 83, 30);
         break;
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 40, 30);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 63, 30);
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4000100L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(6, 31, 30);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x4L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000000L, active1, 0x1L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(6, 71, 30);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(6, 72, 30);
         return jjMoveStringLiteralDfa7_1(active0, 0x4000000000000000L, active1, 0x100000L);
      case 102:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x1000000L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 41, 30);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000L, active1, 0x10000L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 54, 30);
         break;
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 50, 30);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 57, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x4L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 49, 30);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(7, 88, 30);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x201L);
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x4000000000002000L, active1, 0x110000L);
      case 112:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(7, 90, 30);
         break;
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 39, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(8, 73, 30);
         break;
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(8, 66, 30);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x1L);
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(8, 84, 30);
         return jjMoveStringLiteralDfa9_1(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(9, 64, 30);
         break;
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 62, 30);
         break;
      case 121:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(9, 13, 30);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_1(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_1(9, 0L, active1, 0L);
}
static private final int jjMoveStringLiteralDfa11_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(11, 80, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, 0L, active1, 0L);
}
static private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 50;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  else if ((0x3400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(1);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(56, 58);
                  else if (curChar == 39)
                     jjAddStates(59, 60);
                  else if (curChar == 46)
                     jjCheckNAdd(6);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(61, 63);
                  }
                  break;
               case 0:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x3400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(64, 66);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (curChar == 39)
                     jjAddStates(59, 60);
                  break;
               case 12:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if (curChar == 39 && kind > 97)
                     kind = 97;
                  break;
               case 15:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 13);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 18:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if (curChar == 34)
                     jjCheckNAddStates(56, 58);
                  break;
               case 21:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 23:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 24:
                  if (curChar == 34 && kind > 98)
                     kind = 98;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 70);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 27:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if (curChar != 36)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(71, 73);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(71, 73);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(37, 10);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(41, 10);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 10);
                  break;
               case 46:
                  if (curChar != 48)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(61, 63);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(48, 4);
                  break;
               case 49:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(49, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(30);
                  break;
               case 4:
                  if ((0x100000001000L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 10:
                  if ((0x5000000050L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(79, 81);
                  break;
               case 15:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 22:
                  if (curChar == 92)
                     jjAddStates(82, 84);
                  break;
               case 23:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 47:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(48, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 30:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(30);
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(56, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 50 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   28, 29, 34, 35, 38, 39, 8, 19, 20, 22, 10, 12, 43, 45, 2, 4, 
   5, 8, 19, 20, 24, 22, 30, 31, 8, 38, 39, 8, 6, 7, 13, 14, 
   16, 21, 23, 25, 32, 33, 36, 37, 40, 41, 32, 33, 38, 39, 42, 43, 
   10, 60, 72, 81, 91, 99, 108, 111, 21, 22, 24, 12, 14, 47, 49, 4, 
   6, 7, 10, 21, 22, 26, 24, 34, 35, 10, 42, 43, 10, 8, 9, 15, 
   16, 18, 23, 25, 27, 44, 45, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\52\52\57", "\143\150\141\156\147\145\157\156\154\171", "\146\157\162\141\154\154", 
"\145\170\151\163\164\163", "\56\56", "\162\145\164\162\171", "\43", "\164\162\141\143\145", null, null, 
null, null, null, null, null, "\103\101\114\114", "\101\116\131", "\74\174\76", 
"\105\130\103\105\120\124", "\105\130\105\103\125\124\105", "\127\110\105\122\105", "\123\124\117\120", 
"\105\114\123\105", "\111\106", "\174\74\76\174", "\55\76", "\124\105\122\115", 
"\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\165\160\145\162", 
"\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", 
"\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", 
"\164\162\165\145", "\164\162\171", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", "\163\164\162\151\143\164\146\160", null, null, null, null, null, null, null, 
null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", 
"\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", "\53\75", 
"\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", 
"\76\76\75", "\76\76\76\75", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "ASSERTION", 
   "IN_ASSERTION_COMMENT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "TRACEASSERTION", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 0, -1, -1, -1, -1, -1, -1, -1, 2, 1, -1, 0, 0, 
   0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffff80ff1f9L, 0xffffffce8fffffffL, 0xfffffL, 
};
static final long[] jjtoSkip = {
   0x3a00006L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3a00006L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x4500e00L, 0x0L, 0x0L, 
};
static private ASCII_UCodeESC_CharStream input_stream;
static private final int[] jjrounds = new int[112];
static private final int[] jjstateSet = new int[224];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public JassParserTokenManager(ASCII_UCodeESC_CharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public JassParserTokenManager(ASCII_UCodeESC_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(ASCII_UCodeESC_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 112; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(ASCII_UCodeESC_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 22)
         {
            jjmatchedKind = 22;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 26)
         {
            jjmatchedKind = 26;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 26)
         {
            jjmatchedKind = 26;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 26)
         {
            jjmatchedKind = 26;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static final void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 10 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
static final void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 40 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[40]);
         else
            image.append(jjstrLiteralImages[40]);
    if (!jass.GlobalFlags.PARSE_ASSERT) {
        matchedToken.kind = IDENTIFIER;
        if (!warned_assert) {
            System.err.println("Line:"+matchedToken.beginLine+
                ": Warning: `assert' conflicts with Java 1.4 keyword");
            System.err.println(
                "Use the option `-source 1.4' if you use assert statements.");
            warned_assert = true;
        }
    }
         break;
      default : 
         break;
   }
}
}
