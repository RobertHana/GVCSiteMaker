// Generated by the WOLips TemplateEngine Plug-in at Dec 17, 2004 3:14:37 PM

package com.gvcsitemaker.utility.pages;

import java.util.*;

import com.gvcsitemaker.core.*;
import com.gvcsitemaker.core.pagecomponent.*;
import com.gvcsitemaker.core.utility.*;

import com.webobjects.appserver.*;
import com.webobjects.foundation.*;

import net.global_village.foundation.*;



/**
 * Given a DataAccess section, scans each of the single, add, list, and search modes for duplicate
 * columns (two DataAccessColumn children referencing the same Column).  The extra DataAccessColumns
 * are deleted so that there is only a single reference at the end.
 *
// Copyright (c) 2001-2005, The Regents of the University of Michigan, Ann Arbor, MI 48109 USA   All rights reserved.
// This software is published under the terms of the Educational Community License (ECL) version 1.0,
// a copy of which has been included with this distribution in the LICENSE.TXT file.
 */
public class RemoveDuplicateColumns extends WOComponent {

    public String resultMessage;
    public Section aSection;

    protected String siteID;
    protected Website selectedSite;
    protected NSMutableArray dataAccessSections;
    protected Section selectedSection;



    public RemoveDuplicateColumns(WOContext context) {
        super(context);
    }


    /**
     * Main method.  Processes the modes in the Section.
     *
     * @return this page
     */
    public WOComponent processSection() {
        resultMessage = "";

        if (selectedSection() != null)
        {
            DataAccess dataAccess = (DataAccess)selectedSection().component();
            removeDuplicatesFrom(dataAccess.componentForMode(DataAccessMode.SINGLE_MODE));
            removeDuplicatesFrom(dataAccess.componentForMode(DataAccessMode.LIST_MODE));
            removeDuplicatesFrom(dataAccess.componentForMode(DataAccessMode.ADD_MODE));
            removeDuplicatesFrom(dataAccess.componentForMode(DataAccessMode.SEARCH_MODE));
            session().defaultEditingContext().saveChanges();
        }

        return context().page();
    }


    protected void removeDuplicatesFrom(DataAccessMode mode)
    {
        int numDuplicates = 0;
        Enumeration childEnumerator;

        // Search mode has duplicated (sort orderings, stored search) columns by design.  Only check
        // the subset used for configuration
        if (mode instanceof DataAccessSearchMode)
        {
            childEnumerator = new NSArray(((DataAccessSearchMode)mode).orderedDataAccessColumns()).objectEnumerator();
        }
        else
        {
            childEnumerator = new NSArray(mode.toChildren()).objectEnumerator();
        }

        // This is what detects duplicates
        NSMutableArray seenColumns = new NSMutableArray();

        while (childEnumerator.hasMoreElements())
        {
            DataAccessColumn aChild = (DataAccessColumn) childEnumerator.nextElement();

            if ( seenColumns.containsObject(aChild.column()))
            {
                mode.removeChild(aChild);
                numDuplicates++;
            }
            else
            {
                seenColumns.addObject(aChild.column());
            }
        }

        resultMessage += "<b>Removed " + numDuplicates + " duplicates from " + mode.mode() + " mode.</b><br/>";

    }



    /**
     * Finds the site based on the site ID and records it if a match was found.
     *
     * @return this page
     */
    public WOComponent findSite() {

        DebugOut.println(1, "Finding site with ID " + siteID());
        if ( ! StringAdditions.isEmpty(siteID()))
        {
            setSelectedSite(Website.websiteForSiteID(siteID(), session().defaultEditingContext()));
        }

        if (hasSite())
        {
            DebugOut.println(1, "Site Found");
            findDataAccessSections();
        }

        return context().page();
    }



    /**
     * Creates the list of DataAccessSections (if any) in the selected website (if any).  Leaves the
     * list empty if a website is not selected or if the selected website has no DataAccessSections.
     */
    protected void findDataAccessSections()
    {
        dataAccessSections = new NSMutableArray();
        for (int i = 0; i < selectedSite().orderedSections().count(); i++) {
            Section theSection = (Section) selectedSite().orderedSections().objectAtIndex(i);
            if (theSection.type() instanceof DataAccessSectionType)
            {
                dataAccessSections.addObject(theSection);
            }
        }

    }




    /**
\     * @return <code>true</code> if a site ID has been entered and a matching Website located
     */
    public boolean hasSite() {
        return selectedSite() != null;
    }


    /*********** Generic Accessor / Mutator Methods  **************/
    public String siteID() {
        return siteID;
    }
    public void setSiteID(String newSiteID) {
        siteID = newSiteID;
    }

    public Website selectedSite() {
        return selectedSite;
    }
    public void setSelectedSite(Website newSelectedSite) {
        selectedSite = newSelectedSite;
    }

    public Section selectedSection() {
        return selectedSection;
    }
    public void setSelectedSection(Section newSelectedSection) {
        selectedSection = newSelectedSection;
    }

    /** @TypeInfo Section */
    public NSArray dataAccessSections() {
        return dataAccessSections;
    }
    public void setDataAccessSections(NSMutableArray newDataAccessSections) {
        dataAccessSections = newDataAccessSections;
    }


}
