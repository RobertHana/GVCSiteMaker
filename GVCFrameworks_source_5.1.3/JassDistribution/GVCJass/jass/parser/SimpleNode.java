/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

package jass.parser;

public class SimpleNode implements Node {
    protected Node parent;
    protected Node[] children;
    protected int id;
    protected JassParser parser;

    protected Token firstToken, lastToken; // children's token
    protected int childCounter = 0;
    
    public SimpleNode(int i) {
        id = i;
    }
    
    public SimpleNode(JassParser p, int i) {
        this(i);
        parser = p;
    }
    
	
    /** 
     * This method is invoked if a new expansion unit is generated.
     * Its invokation follows a REDUCE action on the node stack.  The
     * token that is the first of the sequence that generates the new
     * expansion is recognized.
     */
    public void jjtOpen() {
        firstToken = parser.getToken(1);
    }
    

    /** 
     * This method is invoked if an expansion unit is finished.  [If
     * the token sequence matches the expansion rule of a
     * NONTERMINAL. REDUCE action !] The token that is the last
     * (actuel parsed) of the sequence that generates the new
     * expansion is recognized.
     */
    public void jjtClose() {
        lastToken = parser.getToken(0);
    }
	
    public void jjtSetParent(Node n) { parent = n; }
    public Node jjtGetParent() { return parent; }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }
    
    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }
    
    /** Accept the visitor. **/
    public Object jjtAccept(JassParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
    
    /** Accept the visitor. **/
    public Object childrenAccept(JassParserVisitor visitor, Object data) {
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                children[i].jjtAccept(visitor, data);
            }
        }
        return data;
    }

    /* You can override these two methods in subclasses of SimpleNode to
       customize the way the node appears when the tree is dumped.  If
       your output uses more than one line you should override
       toString(String), otherwise overriding toString() is probably all
       you need to do. */
    
    public String toString() { 
        return JassParserTreeConstants.jjtNodeName[id]; 
    }
    
    public String toString(String prefix) { return prefix + toString(); }
    
    /* Override this method if you want to customize how the node dumps
       out its children. */
    
    public void dump(String prefix) {
        System.out.println(toString(prefix));
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode)children[i];
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    
    
    /* 
     * New methods which were not automatically generated by jjTree or JavaCC
     */
	 
    public Token getFirstToken() { return firstToken; }
    public int getId() {return id;}
    public Node getFirstChild(){return jjtGetChild(0);}
    public Node getLastChild(){return jjtGetChild(jjtGetNumChildren() - 1);}
    public Token getLastToken() { return lastToken; }
    
    public int getChildNr(SimpleNode node)
    {
        int childNr = children.length - 1;
        while(children.length > 0 && !children[childNr].equals(node)) {
            --childNr;
        }
        return childNr;
    }
		
    public boolean hasId(int test) {return id == test;}

    public void addChild(Node node) {
        jjtAddChild(node, childCounter++);
        node.jjtSetParent(this);
    }
	
	
    public void addToken(Token newToken) {
        if(firstToken == null) {
            firstToken = newToken;
        }
		
        lastToken = newToken;
        System.out.println("new Token: " + JassParserConstants.tokenImage[newToken.kind] + " " +  lastToken);
    }		
}

