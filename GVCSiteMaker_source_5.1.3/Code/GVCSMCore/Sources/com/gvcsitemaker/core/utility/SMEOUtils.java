// Copyright (c) 2001-2005, The Regents of the University of Michigan, Ann Arbor, MI 48109 USA   All rights reserved.
// This software is published under the terms of the Educational Community License (ECL) version 1.0,
// a copy of which has been included with this distribution in the LICENSE.TXT file.
package com.gvcsitemaker.core.utility;

import java.util.*;

import net.global_village.foundation.*;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;

/**
 * This is a class that provides some convenient methods for dealing with enterprise objects. 
 */
public class SMEOUtils extends Object
{

    private static NSMutableDictionary activeClasses = new NSMutableDictionary();


    public static Number primaryKeyForObjectWithPrimaryKeyNamed(EOEnterpriseObject anObject,
                                                                String theKey) {
        NSDictionary primaryKeyDict;
        primaryKeyDict = SMEOUtils.primaryKeyDictForObject(anObject);
        return (Number)primaryKeyDict.objectForKey(theKey);
    }



    /**
     * Returns the primary key for the passed object.  This only works correctly for entities with a single column primary key.
     *
     * @param anObject - the EOEnterpriseObject to return a primary key for.
     */
    public static Object primaryKeyForObject(EOEnterpriseObject anObject)
    {
        /** require [valid_param] anObject != null; **/

        NSDictionary primaryKeyDict= SMEOUtils.primaryKeyDictForObject(anObject);
        //** check primaryKeyDict.count() == 1; **/
        return primaryKeyDict.objectForKey(primaryKeyDict.allKeys().lastObject());

        /** ensure [valid_result] Result != null;  **/
    }



    /** Returns an NSDictionary containing one key/value pair. For example:
     * <pre>
     * { "primaryKeyAttributeName" = 6; } 
     * </pre>
     * Note that the primary key does <b>not</b> have to be a class property for 
     * this method to return it.
     * <p>
     * Note that this will always return the <b>real</b> primary key
     * of an EOGenericRecord as it is stored in the
     * database. primaryKeyDictForObject makes certain that it only
     * returns an EOKeyGlobalID. 
     * @param EOGenericRecord the Object whose primary key dictionary you want
     */
    public static NSDictionary primaryKeyDictForObject(EOEnterpriseObject anObject) {
        EOEditingContext ec;
        EOGlobalID globalID;
        EOEntity entity;
        NSDictionary primaryKeyDict;

        // Get our globalID
        ec = anObject.editingContext();
        globalID = ec.globalIDForObject(anObject);

        if (!(globalID instanceof EOKeyGlobalID))
        {
            throw new RuntimeException("The globalID for object of type " +  anObject.getClass().getName() + 
                             " is not an EOKeyGlobalID.  The globalID is an instance of the class " +
                             globalID.getClass().getName() + ". Perhaps the object has not been saved to the database yet?");
        }

        if (globalID != null) {
            entity = EOModelGroup.defaultGroup().entityNamed(anObject.entityName());
            primaryKeyDict = entity.primaryKeyForGlobalID(globalID);
        } 
        else {
            DebugOut.println(1,"Failed to get globalID for object of type " + anObject.getClass().getName() + ". Unknown error");
            return new NSDictionary();
        }

        DebugOut.println(100,"Got primaryKeyDict: " + primaryKeyDict);
        return primaryKeyDict;
    }



    /**
     * Returns a dictionary of the primary key values generated by EOAdaptorChannel's primaryKeyForNewRowWithEntity method for a new object.  The passed object should have been inserted into editing context but not have been saved to the database.  The dictionary returned has key-value pairs for all primary-key values for the object, the name being the primary key attribute name and the value being the primary key value.
     *
     * @param anObject - Enterprise Object for which you want a primary key
     * @return NSDictionary of primary key values
     */
    public static NSDictionary primaryKeyDictionaryForNewObject(EOEnterpriseObject anObject ) 
    {
        /** require  [valid_param] anObject != null;  **/
        JassAdditions.pre("SMEOUtils","setPrimaryKeyForNewObject [object_in_ec]",  anObject.editingContext() != null);
        JassAdditions.pre("SMEOUtils","setPrimaryKeyForNewObject [global_id_is_temporary]",
                          anObject.editingContext().globalIDForObject(anObject).isTemporary());

        NSDictionary primaryKeyDict = null;

        // Get the database datasource, context, and db channel
        DebugOut.println(10, "anObject.entityName() " + anObject.entityName());
        DebugOut.println(10, "anObject " + anObject);
        EODatabaseDataSource ds = new EODatabaseDataSource ( anObject.editingContext(), anObject.entityName() );
        EODatabaseContext dbContext = ds.databaseContext();
        try
        {
            dbContext.lock();
            EODatabaseChannel dbChannel = dbContext.availableChannel();

            if (dbChannel == null)
            {
                throw new RuntimeException("Failed to get database channel");
            }

            DebugOut.println(10, "Creating key...");
            EOAdaptorChannel adaptorChannel = dbChannel.adaptorChannel();
            primaryKeyDict = (NSDictionary)(adaptorChannel.primaryKeysForNewRowsWithEntity(1,  ds.entity()).objectAtIndex(0) );

            // The FrontBase plugin does not really commit after generating a PK, despite what the log says.  We need to do this so that an open transaction is not left lying around. primaryKeysForNewRowsWithEntity seems to remove any existing transaction without commiting it, so these will not work if wrapped around the above call.  The transaction must be opened and commited like this, as strange as this looks.  Thia has been reported to FrontBase.
            //EOAdaptorContext adaptorContext = adaptorChannel.adaptorContext();
            //adaptorContext.beginTransaction();
            //adaptorContext.commitTransaction();
        }
        finally
        {
            dbContext.unlock();
        }
        
        return primaryKeyDict;
        /** ensure  [valid_result] Result != null;  **/
    }



    /**
     * This method set the primary key values generated by EOAdaptorChannel's primaryKeyForNewRowWithEntity method for a new object in an editing context that has NOT been inserted (saved) to the database.
     *
     * @param anObject - the Enterprise Object for which you want primary keys to be set
     */
    public static void setPrimaryKeyForNewObject(EOEnterpriseObject anObject)
    {
        /** require  [valid_param] anObject != null;  **/
        JassAdditions.pre("SMEOUtils","setPrimaryKeyForNewObject [object_in_ec]",  anObject.editingContext() != null);
        JassAdditions.pre("SMEOUtils","setPrimaryKeyForNewObject [global_id_is_temporary]",
                          anObject.editingContext().globalIDForObject(anObject).isTemporary());

        setPrimaryKeyForNewObject(SMEOUtils.primaryKeyDictionaryForNewObject(anObject), anObject);
    }



    /**
     * This method set the primary key values from the passed dictionary into an object.
     *
     * @param primaryKeyDict - the NSDictionary containing primary key values for anObject
     * @param anObject - the Enterprise Object for which you want primary keys to be set
     */
    public static void setPrimaryKeyForNewObject(NSDictionary primaryKeyDict, EOEnterpriseObject anObject)
    {
        /** require  [valid_dictionary] primaryKeyDict != null;  [valid_object] anObject != null;  **/
        anObject.takeValuesFromDictionary( primaryKeyDict );
    }



    /**
     * Returns the Class to instantiate for the indicated entity and globalID.  This is an EOModelGroup delegate method which is implemented to allow classes in GVCSMCustom to be subsitituted for the base versions in GVCSMCore.
     *
     * @param entity the entity to return a class for
     * @param globalID the globalID of the object to return a class for.
     *
     * @return the Class to instantiate for the indicated entity and globalID.
     */
    public synchronized static Class classForObject( EOEntity entity, com.webobjects.eocontrol.EOGlobalID globalID)
    {
        /** require [entity_not_null] entity != null; **/
        
        String entityName = entity.name();

        // If we do not already know the Class for this entity, then we need to determine what it is.
        if (activeClasses().objectForKey(entityName) == null)
        {
            String className = entity.className();
            Class aClass = null;
            // First we try <EO className>Custom (e.g. WebsiteCustom).  Note that 'Custom' is added to the end to allow for a package name on the beginning (e.g. com.sitemaker.Website becomes com.sitemaker.Website.Custom).  This could also be handled by changing the package name, etc.
            try
            {
                aClass = Class.forName(className + "Custom");
            }
            catch (ClassNotFoundException e)
            {
                // OK, <EO className>Custom is not there, so use what ever the EOModel says.
                try
                {
                    aClass = Class.forName(className);
                }
                catch (ClassNotFoundException e2)
                {
                    DebugOut.println(0, "**** Exception getting class for entity " + entity.name() +
                        "and global id " + globalID.toString());
                    // Translate the method signature so we can maintain the method signature
                    throw new ExceptionConverter(e2);
                }
            }
            ((NSMutableDictionary) activeClasses()).setObjectForKey(aClass, entityName);
        }

        return (Class) activeClasses().objectForKey(entityName);

        /** ensure [result_not_null] Result != null; **/
    }



    /**
     * Returns the Class to instantiate for the indicated entity and globalID.  This instance version of the static method classForObject here to allow it to be used as an EOModelGroup delegate method.
     *
     * @param entity the entity to return a class for
     * @param globalID the globalID of the object to return a class for.
     *
     * @return the Class to instantiate for the indicated entity and globalID.
     */
    public Class classForObjectWithGlobalID( EOEntity entity, com.webobjects.eocontrol.EOGlobalID globalID)
    {
        /** require
        [entity_not_null] entity != null;
        [global_id_not_null] globalID != null; **/
        
        return SMEOUtils.classForObject(entity, globalID);

        /** ensure [result_not_null] Result != null; **/
    }



    /**
     * Returns an instance of the indicated entity.  This is to be used in place of new EntityName() to create new instances os that classes in GVCSMCustom can be subsitituted for the base versions in GVCSMCore.
     *
     * @param entityName the name of the entity to return an instance of
     *
     * @return an instance of the indicated entity.
     */
    public static EOEnterpriseObject newInstanceOf(String entityName)
    {
        /** require 
            [entity_name_not_null] entityName != null; 
            [entity_exists] EOModelGroup.defaultGroup().entityNamed(entityName) != null;  **/

        DebugOut.println(30, "entityName is " + entityName);

        Class classForEntity = classForObject( EOModelGroup.defaultGroup().entityNamed(entityName), null);
        EOEnterpriseObject newObject;

        try
        {
            newObject = (EOEnterpriseObject) classForEntity.newInstance();            
        }
        // Translate exceptions to keep the compiler happy.  These should not happen unless the EOModels are messed up.
        catch (InstantiationException ie)
        {
            throw new RuntimeException(ie.getMessage() + " for entity named " + entityName);
        }
        catch (IllegalAccessException iae)
        {
            throw new RuntimeException(iae.getMessage() + " for entity named " + entityName);
        }
 
        return newObject;

        /** ensure [result_not_null] Result != null; **/
    }



    /**
     * Returns a dictionary of the classes registered for EOEntities so far.  The entries are keyed on entity name.
     *
     * @return a dictionary of the classes registered for EOEntities so far
     */
    protected static NSDictionary activeClasses()
    {
        return activeClasses;

        /** ensure [result_not_null] Result != null; **/
    }



    /**
     * Returns the number of rows in the table associated with the passed entity name.  This does not consider EO inheritance at all and will return 0 if used with an abstract class.  Raises an exception if the named entity cannot be located.
     *
     * @param entityName - the name of the entity to count.
     *
     * @return the number of rows in the table associated with the passed entity name.
     */
    public static int countOfEntityNamed (String entityName, EOEditingContext ec)
    {
        /** require [entity_name_not_null] entityName != null; **/
        
        EOModelGroup modelGroup = EOModelGroup.defaultGroup();
        EOEntity entity = modelGroup.entityNamed(entityName);

        if (entity == null)
        {
            throw new RuntimeException("Entity named " + entityName + " cannot be located");
        }

        String tableName = entity.externalName();
        String modelName = entity.model().name();
        String sql = "select count(*) from " + tableName; // Oracle cannot handle trailing semi-colons.  Does FB require them?

        NSArray resultSet = EOUtilities.rawRowsForSQL( ec, modelName, sql, null);
        NSDictionary firstRow = (NSDictionary)resultSet.objectAtIndex(0);
        String firstColumnKey = (String)firstRow.allKeys().objectAtIndex(0);

        return ((java.lang.Number)firstRow.objectForKey(firstColumnKey)).intValue();
    }



    /**
     * Convenience method to invalidate a single object.
     *
     * @param eoObject - the object to invalidate.
     */
    public static void invalidateObject(EOEnterpriseObject eoObject)
    {
        /** require [eo_object_not_null] eoObject != null; **/

        JassAdditions.pre("SMEOUtils",
                          "invalidateObject()",
                          eoObject.editingContext() != null);
            
        EOEditingContext ec = eoObject.editingContext();

        if (ec == null)
        {
            throw new RuntimeException("Called  SMEOUtils.invalidateObject() with EO object not in an editing context");
        }

        EOGlobalID globalID = ec.globalIDForObject(eoObject);
        NSArray globalIDArray = new NSArray(globalID);
        ec.invalidateObjectsWithGlobalIDs(globalIDArray);
    }



    /**
     * Workhorse method to march through an array of EOs calling willRead() on each.  This was done in an attempt to pre-fire faults before deleting objects with delete rules to avoid a bug in 5.1 in which faults fired during processRecentChanges() mess up the EC.
     *
     * @param anArray the NSArray of EOEnterpriseObjects to fault in
     */
    public static void fireFaultsInArray(NSArray anArray)
    {
        /** require [anArray_not_null] anArray != null;  **/
        Enumeration arrayEnumerator = anArray.objectEnumerator();
        while (arrayEnumerator.hasMoreElements())
        {
            ((EOEnterpriseObject)arrayEnumerator.nextElement()).willRead();
        }
    }

    
}

