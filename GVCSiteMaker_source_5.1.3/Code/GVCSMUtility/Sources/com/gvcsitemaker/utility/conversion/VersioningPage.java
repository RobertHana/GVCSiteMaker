// Copyright (c) 2001-2005, The Regents of the University of Michigan, Ann Arbor, MI 48109 USA   All rights reserved.
// This software is published under the terms of the Educational Community License (ECL) version 1.0,
// a copy of which has been included with this distribution in the LICENSE.TXT file.

package com.gvcsitemaker.utility.conversion;
// Generated by the WOLips TemplateEngine Plug-in at Jul 4, 2006 10:06:01 AM

import net.global_village.eofvalidation.EOEditingContext;
import net.global_village.foundation.GVCBoolean;
import net.global_village.virtualtables.VirtualField;

import com.gvcsitemaker.core.Section;
import com.gvcsitemaker.core.SectionVersion;
import com.gvcsitemaker.core.TextImageSectionType;
import com.gvcsitemaker.core.appserver.SMApplication;
import com.gvcsitemaker.core.databasetables.VirtualSiteFileColumn;
import com.gvcsitemaker.core.databasetables.VirtualSiteFileField;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSLog;
import com.webobjects.foundation.NSTimestamp;

/**
 * Sets the default for isVersioning for Sections and creates default SectionVersion object for each Text/Image component
 */
public class VersioningPage extends WOComponent 
{
    public String conversionMessage = "";

    
    /**
     * Designated constructor.  
     */    
    public VersioningPage(WOContext context) 
    {
        super(context);
    }


    
    /**
     * Updates isVersioning property for Text/Image Sections
     * 
     * @return this
     */    
    public WOComponent setIsVersioningDefault()
    {
        boolean defaultValue = false;
        EOEditingContext ec;
        NSArray sections;
        int converted;
        
        ec = new EOEditingContext();
        ec.lock();
        try
        {
            // Update Sections
            NSLog.out.appendln("Fetching Sections");
            sections = EOUtilities.objectsForEntityNamed(ec, "Section");
            NSLog.out.appendln("Fetched Sections: " + sections.count());
            converted = 0;
            for (int i = 0; i < sections.count(); i++)
            {
                NSLog.out.appendln("Processing " + i);

                Section aSection = (Section) sections.objectAtIndex(i);
                
                aSection.setRequireHttpsAccessForPublicSections(new net.global_village.foundation.GVCBoolean(SMApplication.appProperties().booleanPropertyForKey("RequireHTTPSAccessForPublicSections")));

                if (aSection.isVersioning() == null)
                {
                    try
                    {
                        if ((aSection.type() != null ) && (aSection.type() instanceof TextImageSectionType))
                        {
                            boolean systemDefault = SMApplication.appProperties().booleanPropertyForKey("VersioningEnabled");
                            aSection.setIsVersioning(new net.global_village.foundation.GVCBoolean(systemDefault));
                        }
                        else
                        {
                            aSection.setIsVersioning(new net.global_village.foundation.GVCBoolean(defaultValue));
                        }
                        converted++;
                    }
                    catch (java.lang.IllegalStateException e)
                    {
                        ec.forgetObject(aSection);
                    }
                }
            }
            NSLog.out.appendln("Saving...");
            ec.saveChanges();
            NSLog.out.appendln("Saved");
            conversionMessage = "Set Versioning and RequireHttpsAccess: Checked " + sections.count() + ", converted " + converted + " Sections.  ";
        }
        finally
        {
            ec.unlock();
            ec.dispose();
        }        
        
        return context().page();
    }

    
    
    /**
     * Creates SectionVersion object (defaulting dates to lastModified from component and user to site owner) for each Text/Image section and attach to section
     * 
     * @return this
     */        
    public WOComponent createVersionObjects()
    {
        EOEditingContext ec;
        NSArray sections;
        int converted;
        int count;
        
        ec = new EOEditingContext();
        ec.setUndoManager(null);
        ec.lock();
        try
        {
            NSLog.out.appendln("Fetching Sections");
            sections = EOUtilities.objectsForEntityNamed(ec, "Section");
            NSLog.out.appendln("Fetched Sections: " + sections.count());
            converted = 0;
            count = 100;
            for (int i = 0; i < sections.count(); i++)
            {
                NSLog.out.appendln("Processing " + i);

                Section aSection = (Section) sections.objectAtIndex(i);
                if (! aSection.hasVersions())
                {
                    try
                    {
                        if ((aSection.type() != null ) && (aSection.type() instanceof TextImageSectionType) && (aSection.component() != null)
                                && (aSection.website() != null))
                        {
                            
                            boolean systemDefault = SMApplication.appProperties().booleanPropertyForKey("VersioningEnabled");
                            aSection.setIsVersioning(new net.global_village.foundation.GVCBoolean(systemDefault));
                            
                            SectionVersion newSectionVersion = SectionVersion.newSectionVersion();
                            ec.insertObject(newSectionVersion);
                            
                            newSectionVersion.setCreatedDate(new NSTimestamp()); 
                            newSectionVersion.setDetails(null); 
                            newSectionVersion.setName("Version 1");
                            newSectionVersion.setIsLocked(GVCBoolean.falseBoolean()); 
                            newSectionVersion.setVersionNumber(new Integer("1")); 
                            
                            newSectionVersion.setModifiedDate(new NSTimestamp()); 

                            newSectionVersion.setCreatedBy(aSection.website().owner()); 
                            newSectionVersion.setModifiedBy(aSection.website().owner()); 
                            
                            newSectionVersion.addObjectToBothSidesOfRelationshipWithKey(aSection, "section"); 
                            newSectionVersion.addObjectToBothSidesOfRelationshipWithKey(aSection.component(), "component");        
                            converted++;                            
                        }
                        else
                        {
                            if (aSection.component() == null)
                            {
                                NSLog.out.appendln("No Component: Skipping " + aSection.name());
                            }
                            
                            if (aSection.website() == null)
                            {
                                NSLog.out.appendln("No Website: Skipping " + aSection.name());
                            }
                        }
                        
                        if (i == count)
                        {
                            NSLog.out.appendln("Saving..." + count + "th");
                            ec.saveChanges();
                            count = count + 100;
                        }

                    }
                    catch (java.lang.IllegalStateException e)
                    {
                        ec.forgetObject(aSection);
                    }
                }
            }
            NSLog.out.appendln("Saving...");
            ec.saveChanges();
            NSLog.out.appendln("Saved");
            conversionMessage = "Create SectionVersion: Checked " + sections.count() + ", created " + converted + " SectionVersions.  ";
        }
        finally
        {
            ec.unlock();
            ec.dispose();
        }        
        
        return context().page();
    }
    
    
    
    /**
     * Update restrictingValue of VirtualColumns whose VirtualField is of type SiteFile to support Portable Tables
     * 
     * sql: update virtual_column set restricting_value = 'VirtualSiteFileColumn' where column_id = (select column_id from virtual_column "c", virtual_field "f" where "f".virtual_column_id = "c".column_id and "f".restricting_value = 'SiteFile');
     * @return this
     */        
    public WOComponent updateVirtualColumns()
    {
        EOEditingContext ec;
        NSArray fields;
        int converted;
        
        ec = new EOEditingContext();
        ec.lock();
        try
        {
            NSLog.out.appendln("Fetching VirtualFields");
            fields = EOUtilities.objectsForEntityNamed(ec, "VirtualField");
            NSLog.out.appendln("Fetched VirtualFields: " + fields.count());
            converted = 0;
            for (int i = 0; i < fields.count(); i++)
            {
                NSLog.out.appendln("Processing " + i);

                VirtualField aField = (VirtualField) fields.objectAtIndex(i);
                if (aField.restrictingValue().equals(VirtualSiteFileField.ColumnTypeName))
                {
                    aField.column().setRestrictingValue(VirtualSiteFileColumn.VirtualSiteFileColumnRestrictingValue);
                    converted++;
                }
            }
            NSLog.out.appendln("Saving...");
            ec.saveChanges();
            NSLog.out.appendln("Saved");
            conversionMessage = "Updated VirtualColums: Checked " + fields.count() + " fields, updated " + converted + " VirtualColumns.";
        }
        finally
        {
            ec.unlock();
            ec.dispose();
        }        
        
        return context().page();
    }    
 
    
    
    public String conversionMessage(){
        return conversionMessage;
    }
    public void setConversionMessage(String newConversionMessage) {
        conversionMessage = newConversionMessage;
    }    
}



